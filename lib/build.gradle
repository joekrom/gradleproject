/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.1/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    id 'java'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.1'

    // This dependency is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.commons:commons-math3:3.6.1'

    // This dependency is used internally, and not exposed to consumers on their own compile classpath.
    implementation 'com.google.guava:guava:30.1-jre'
    
  // https://mvnrepository.com/artifact/org.springframework/spring-core
	implementation group: 'org.springframework', name: 'spring-core', version: '5.3.8'
	
	// https://mvnrepository.com/artifact/com.sparkjava/spark-core
	implementation group: 'com.sparkjava', name: 'spark-core', version: '2.9.3'
	
	// https://mvnrepository.com/artifact/com.sparkjava/spark-kotlin
	implementation group: 'com.sparkjava', name: 'spark-kotlin', version: '1.0.0-alpha'
	
	// https://mvnrepository.com/artifact/org.slf4j/slf4j-api
	implementation group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.31'
	  
	
	
    
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}


// It is convenient to copy all the dependencies together into the same directory in order 
// to run the app on command line 
/*task copyDocs(type: Copy) {
    from '$buildDir/lib/src/main/java/sparkjavatest/Library.java'
    into '$buildDir/build/libs'
}
*/
/*
//copying all dependencies attached to 'compileClasspath' into a specific folder
task copyAllDependencies(type: Copy) {
	//referring to the 'compileClasspath' configuration
     from configurations.compileClasspath
     into ''
}
*/

println project.name
println project.projectDir 
println project.buildDir
println project.group
println project.getRootProject()
